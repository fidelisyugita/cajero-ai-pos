package com.huzakerna.cajero.config;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.util.Date;
import javax.crypto.SecretKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class JwtUtils {
  private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);

  @Value("${jwt.secret-key}")
  private String jwtSecret;

  @Value("${jwt.expiration-ms}")
  private int jwtExpirationMs;


  private SecretKey getSigningKey() {
    byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
    return Keys.hmacShaKeyFor(keyBytes);
  }

  // public String generateJwtToken(Authentication authentication) {
  // UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

  // return Jwts.builder()
  // .setSubject((userPrincipal.getUsername()))
  // .setIssuedAt(new Date())
  // .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))
  // .signWith(SignatureAlgorithm.HS512, jwtSecret)
  // .compact();
  // }

  public String generateJwtToken(String email) {
    return Jwts.builder()
      .subject(email)
      .issuedAt(new Date(System.currentTimeMillis()))
      .expiration(new Date(System.currentTimeMillis() + jwtExpirationMs))
      .signWith(getSigningKey(), Jwts.SIG.HS256)
      .compact();
  }

  public String getEmailFromJwtToken(String token) {
    return Jwts.parser()
      .verifyWith(getSigningKey())
      .build()
      .parseSignedClaims(token)
      .getPayload()
      .getSubject();
  }

  public boolean validateJwtToken(String authToken) {
    try {
      Jwts.parser()
        .verifyWith(getSigningKey())
        .build()
        .parseSignedClaims(authToken);
      return true;
    } catch (MalformedJwtException e) {
      logger.error("Invalid JWT token: {}", e.getMessage());
    } catch (ExpiredJwtException e) {
      logger.error("JWT token is expired: {}", e.getMessage());
    } catch (UnsupportedJwtException e) {
      logger.error("JWT token is unsupported: {}", e.getMessage());
    } catch (IllegalArgumentException e) {
      logger.error("JWT claims string is empty: {}", e.getMessage());
    } catch (JwtException e) {
      logger.error("JWT validation error: {}", e.getMessage());
    }
    return false;
  }
}
