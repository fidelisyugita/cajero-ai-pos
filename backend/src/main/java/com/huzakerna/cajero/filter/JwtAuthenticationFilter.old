package com.huzakerna.cajero.filter;

import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.huzakerna.cajero.config.JwtUtils;
import com.huzakerna.cajero.dto.LoginRequest;
import com.huzakerna.cajero.security.UserDetailsImpl;
import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

  private final JwtUtils jwtUtils;

  @Autowired
  public JwtAuthenticationFilter(JwtUtils jwtUtils) {
    this.jwtUtils = jwtUtils;
    setFilterProcessesUrl("/api/auth/signin");
  }

  @Override
  public Authentication attemptAuthentication(HttpServletRequest request,
    HttpServletResponse response)
    throws AuthenticationException {
    try {
      LoginRequest creds = new ObjectMapper()
        .readValue(request.getInputStream(), LoginRequest.class);

      return getAuthenticationManager().authenticate(
        new UsernamePasswordAuthenticationToken(
          creds.email(),
          creds.password()));
    } catch (IOException e) {
      throw new AuthenticationServiceException("Authentication failed", e);
    }
  }

  @Override
  protected void successfulAuthentication(HttpServletRequest request,
    HttpServletResponse response,
    FilterChain chain,
    Authentication authResult) {
    String email = ((UserDetailsImpl) authResult.getPrincipal()).getUsername();
    String token = jwtUtils.generateJwtToken(email);
    response.addHeader("Authorization", "Bearer " + token);
  }
}
