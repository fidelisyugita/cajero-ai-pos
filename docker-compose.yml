version: "3.8"
services:
  # ---------- Database ----------
  postgres:
    image: postgres:13
    container_name: cajero-postgres
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/db/init.sql:/docker-entrypoint-initdb.d/init.sql # Auto-runs on first startup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # ---------- Backend ----------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cajero-backend
    env_file: .env # Load all variables
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app # Source code
      - ~/.gradle/caches:/home/gradle/.gradle/caches # Primary cache
      - ~/.m2:/root/.m2 # Optional fallback

  # # ---------- AI Service (Python) ----------
  # ai-service:
  #   build:
  #     context: ./ai-api/fastapi
  #     dockerfile: Dockerfile
  #   container_name: cajero-ai
  #   ports:
  # - "${AI_PORT}:${AI_PORT}"
  #   volumes:
  # - ./ai-api/fastapi:/app
  # - ai_models:/app/models

  #   environment:
  #     - PYTHONUNBUFFERED=1

  # # ---------- Frontend ----------
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: cajero-frontend
  # env_file:
  #   - .env
  # ports:
  #   - "${FRONTEND_PORT}:${FRONTEND_PORT}"
  #   depends_on:
  #     backend:
  #       condition: service_started
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules

  # # ---------- Monitoring ----------
  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: cajero-pgadmin
  #   env_file:
  #     - .env
  #   ports:
  #     - "${PG_ADMIN_PORT}:80"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

volumes:
  postgres_data:
  # ai_models:
